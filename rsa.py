
import modular
import random

def generar_claves(min_primo, max_primo):
    lista = modular.lista_primos(min_primo, max_primo)
    p1 = random.choice(lista)
    lista.remove(p1)
    p2 = random.choice(lista)

    n = p1 * p2
    phi_n = (p1 - 1) * (p2 - 1)
    d = random.randint(1, phi_n)
    while modular.mcd(d, phi_n) != 1:
        d = random.randint(1, phi_n)
    e = modular.inversa_mod_p(d, phi_n)

    return n, e, d

def aplicar_padding(m, digitos_padding):
    m = str(m)
    for i in range(digitos_padding):
        m = m + str(random.randint(0, 9))
    return int(m)

def eliminar_padding(m, digitos_padding):
    m = str(m)
    for i in range(digitos_padding):
        m = m[:-1]
    return int(m)

def cifrar_rsa(m, n, e, digitos_padding):
    m = aplicar_padding(m, digitos_padding)
    c = modular.potencia_mod_p(m, e, n)
    return c

def descifrar_rsa(c, n, d, digitos_padding):
    m = modular.potencia_mod_p(c, d, n)
    m = eliminar_padding(m, digitos_padding)
    return m

def cifrar_cadena_rsa(s, n, e, digitos_padding):
    s_unicode = [ord(c) for c in s]
    c = [cifrar_rsa(m, n, e, digitos_padding) for m in s_unicode]
    return c

def descifrar_cadena_rsa(cList, n, d, digitos_padding):
    m_unicode = [descifrar_rsa(c, n, d, digitos_padding) for c in cList]
    s = str()
    for i in m_unicode:
        s += chr(i)
    return s

def romper_clave(n, e):
    factores = modular.factorizar(n)
    #Si el diccionario tiene más de 2 claves, entonces n no es el producto de dos primos
    if len(factores) > 2:
        return None
    else:
        #Obtengo los dos primos
        p1 = list(factores.keys())[0]
        p2 = list(factores.keys())[1]
        #Calculo phi(n)
        phi_n = (p1-1)*(p2-1)
        d = modular.inversa_mod_p(e, phi_n)
        return d

def ataque_texto_plano(cList, n, e):
    TODOS_LOS_CARACTERES = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ,.¿?¡!áéíóúÁÉÍÓÚñÑ-_'()[]"
    caracteres_devueltos = cifrar_cadena_rsa(TODOS_LOS_CARACTERES, n, e, 0) 
    s = str()
    for c in cList:
        try:
            s += TODOS_LOS_CARACTERES[caracteres_devueltos.index(c)]
        except:
            s += "❓"
    return s

def main():
    #Quiero enviar hola y luego descifrarlo
    s = "hola"
    n, e, d = generar_claves(100, 1000)
    cList = cifrar_cadena_rsa(s, n, e, 2)
    print("Cad cifrada: ", cList)
    s = descifrar_cadena_rsa(cList, n, d, 2)
    print("Cad descifrada: ", s)

    #Ahora intento romper la clave
    print("\nATAQUE")
    s = "hola"
    n, e, d = generar_claves(100, 1000)
    cList = cifrar_cadena_rsa(s, n, e, 0)
    print("Cad cifrada: ", cList)
    s = ataque_texto_plano(cList, n, e)
    print("Cad descifrada: ", s)

    print("\nATACAMOS A X")
    X_n = 28282590191348679547
    X_e = 15780653617344828671
    X_m
    #En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivía un hidalgo de los de lanza en astillero, adarga antigua, rocín flaco y galgo corredor. Una olla 
    #de algo más vaca que carnero, salpicón las más noches, duelos y quebrantos los sábados, lantejas los viernes, algún palomino de añadidura los domingos, consumían las tres partes de su hacienda.
    X_m = X_m.split()
    X_m = [int(i) for i in X_m]
    #Ataco el texto plano
    s = ataque_texto_plano(X_m, X_n, X_e)
    print(s)


if __name__ == "__main__":
    main()